let
    //1 Set a minimum date of Jan 1 of todays year - 6
    StartDate = Date.StartOfYear(
        Date.AddYears(
            Date.From(DateTime.FixedLocalNow()), 
            -6
        )
    ),

    //2 Set a maximum date to December 31 in todays year + 5
    EndDate =  Date.EndOfYear(
        Date.AddYears(
            Date.From(DateTime.FixedLocalNow()),
            5
        )
    ),

    //3 Calculate the number of days
    NumberOfDays = Duration.Days( EndDate - StartDate ),

    //4 Insert the dates into a list in 1 day increments. #duration(days,hours,mins,secs)
    Source = List.Dates(
        StartDate, 
        NumberOfDays +1, 
        #duration(1,0,0,0)
    ),

    //5 Convert the list of dates into a table
    Convert_to_table = Table.FromList(
        Source, 
        Splitter.SplitByNothing(), 
        null, 
        null, 
        ExtraValues.Error
    ),

    //6 Renamed the auto-generated name Column1 to Date
    Renamed_column = Table.RenameColumns(
        Convert_to_table,
        {
            {"Column1", "Date"}
        }
    ),

    //7 Changed Date into a date type
    Changed_type = Table.TransformColumnTypes(
        Renamed_column,
        {
            {"Date", type date}
        }
    ),

    //8 Added calendar year column
    Year = Table.AddColumn(
        Changed_type, 
        "CY Year", 
        each Date.Year([Date]), 
        Int64.Type
    ),

    //9: Insert a fiscal year column that starts July 1
    Fiscal_year = Table.AddColumn(
        Year,
        "FY Year", 
        each Date.Year(Date.AddMonths([Date],6)), 
        Int64.Type
    ),

    //10: Insert a short cy column for the calendar year
    Short_CY = Table.AddColumn(
        Fiscal_year, 
        "CY Short", 
        each Number.From(Text.End(Text.From([CY Year]), 2)), 
        Int64.Type
    ),

    //11 Insert a short fy column for the fiscal year
    Short_FY = Table.AddColumn(
        Short_CY, 
        "FY Short", 
        each Number.From(Text.End(Text.From([FY Year]), 2)), 
        Int64.Type
    ),

    //12 Insert a month column based on the calendar year
    CY_month_sort = Table.AddColumn(
        Short_FY, 
        "CY Month Sort", 
        each Date.Month([Date]), 
        Int64.Type
    ),

    //13 Insert a month name column
    CY_month = Table.AddColumn(
        CY_month_sort,
        "CY Month",
        each Date.ToText([Date], "MMM"),
        type Text
    ),

    //14 
    #"Inserted Month" = Table.AddColumn(CY_month, "Month", each Date.Month([Date]), type number),

    //15 
    #"Inserted Month 2Digit" = Table.AddColumn(#"Inserted Month", "Full Month", each if [Month]< 10 then Text.Combine({"0", Text.From([Month], "en-US")}) else Text.From([Month],"en-US")),

    //16 
    #"Changed Type3" = Table.TransformColumnTypes(#"Inserted Month 2Digit",{{"Full Month", type text}}),

    //17 
    #"Inserted Month Name" = Table.AddColumn(#"Changed Type3", "Month Name", each Date.MonthName([Date]), type text),

    //18 
    #"Inserted Month Name Abbrev" = Table.AddColumn(#"Inserted Month Name", "Month Name Abbrev", each Text.Start([Month Name],3)),

    //19 
    #"Changed Type4" = Table.TransformColumnTypes(#"Inserted Month Name Abbrev",{{"Month Name Abbrev", type text}}),

    //20 
    #"Inserted Start of Month" = Table.AddColumn(#"Changed Type4", "Start of Month", each Date.StartOfMonth([Date]), type date),

    //21 
    #"Inserted End of Month" = Table.AddColumn(#"Inserted Start of Month", "End of Month", each Date.EndOfMonth([Date]), type date),

    //22
    #"Inserted Days in Month" = Table.AddColumn(#"Inserted End of Month", "Days in Month", each Date.DaysInMonth([Date]), type number),

    //23 
    #"Inserted Quarter" = Table.AddColumn(#"Inserted Days in Month", "Quarter", each Date.QuarterOfYear([Date]), type number),

    //24 
    #"Inserted Start of Quarter" = Table.AddColumn(#"Inserted Quarter", "Start of Quarter", each Date.StartOfQuarter([Date]), type date),

    //25 
    #"Inserted End of Quarter" = Table.AddColumn(#"Inserted Start of Quarter", "End of Quarter", each Date.EndOfQuarter([Date]), type date),

    //26 
    #"Inserted Fiscal Period" = Table.AddColumn(#"Inserted End of Quarter","Fiscal Period", each Date.Month(Date.AddMonths([Date],6)), type number),

    //27 
    #"Inserted Fiscal Period 2digit" = Table.AddColumn(#"Inserted Fiscal Period","Fiscal Period 2 Digit", each if [Fiscal Period]< 10 then Text.Combine({"0", Text.From([Fiscal Period], "en-US")}) else Text.From([Fiscal Period],"en-US")),

    //29
    #"Inserted Federal Fiscal Year" = Table.AddColumn(#"Inserted Fiscal Period 2digit","Federal Fiscal Year", each Date.Year(Date.AddMonths([Date],3)), type number),

    //30 
    #"Inserted Week of Year" = Table.AddColumn(#"Inserted Federal Fiscal Year", "Week of Year", each Date.WeekOfYear([Date]), type number),

    //31 
    #"Inserted Week Number 2Digit" = Table.AddColumn(#"Inserted Week of Year", "Week Number 2Digit", each if [Week of Year]< 10 then Text.Combine({"0", Text.From([Week of Year], "en-US")}) else Text.From([Week of Year],"en-US")),

    //32 
    #"Changed Type6" = Table.TransformColumnTypes(#"Inserted Week Number 2Digit",{{"Week Number 2Digit", type text}}),

    //33 
    #"Inserted Week of Month" = Table.AddColumn(#"Changed Type6", "Week of Month", each Date.WeekOfMonth([Date]), type number),

    //34 
    #"Inserted Start of Week" = Table.AddColumn(#"Inserted Week of Month", "Start of Week", each Date.StartOfWeek([Date]), type date),

    //35 
    #"Inserted End of Week" = Table.AddColumn(#"Inserted Start of Week", "End of Week", each Date.EndOfWeek([Date]), type date),

    //36 
    #"Inserted Day" = Table.AddColumn(#"Inserted End of Week", "Day", each Date.Day([Date]), type number),

    //37 
    #"Renamed Columns1" = Table.RenameColumns(#"Inserted Day",{{"Day", "Day Number of Month"}}),

    //38 
    #"Inserted Day of Week" = Table.AddColumn(#"Renamed Columns1", "Day of Week", each Date.DayOfWeek([Date]), type number),

    //39 
    #"Inserted Day Name" = Table.AddColumn(#"Inserted Day of Week", "Day Name", each Date.DayOfWeekName([Date]), type text),

    //40 
    #"Inserted Day of Year" = Table.AddColumn(#"Inserted Day Name", "Day of Year", each Date.DayOfYear([Date]), Int64.Type),

    //41 
    #"Added Custom" = Table.AddColumn(#"Inserted Day of Year", "Day Name Abbrev", each Text.Start([Day Name],3)),

    //42 
    #"Changed Type1" = Table.TransformColumnTypes(#"Added Custom",{{"Day Name Abbrev", type text}}),

    //43 
    #"Added Conditional Column" = Table.AddColumn(#"Changed Type1", "Week Day", each if [Day of Week] = 6 then "No" else if [Day of Week] = 0 then "No" else "Yes"),

    //44 
    #"Changed Type5" = Table.TransformColumnTypes(#"Added Conditional Column",{{"Week Day", type text}}),

    //45 
    #"Added Conditional Column1" = Table.AddColumn(#"Changed Type5", "Work Day Count", each if [Week Day] = "Yes" then 1 else 0),

    //46 
    #"Changed Type7" = Table.TransformColumnTypes(#"Added Conditional Column1",{{"Work Day Count", Int64.Type}}),

    //47 
    #"Inserted Merged Column" = Table.AddColumn(#"Changed Type7", "Month Number Name", each Text.Combine({[Full Month], [Month Name]}, "-"), type text),

    //48 
    #"Inserted Merged Column1" = Table.AddColumn(#"Inserted Merged Column", "Month Number Name Abbrev", each Text.Combine({[Full Month], [Month Name Abbrev]}, "-"), type text),

    //49 
    #"Inserted Age" = Table.AddColumn(#"Inserted Merged Column1", "Days to Today", each Date.From(DateTime.LocalNow()) - [Date], type duration),

    //50 
    #"Calculated Total Days" = Table.TransformColumns(#"Inserted Age",{{"Days to Today", Duration.TotalDays, type number}}),

    //51 
    #"Changed Type8" = Table.TransformColumnTypes(#"Calculated Total Days",{{"Days to Today", Int64.Type}})

in
    #"Changed Type8"